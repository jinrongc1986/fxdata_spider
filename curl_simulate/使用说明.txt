总体来说使用本程序需要只需要在以下几个地方自由选择参数进行调节即可
1.可选择是否执行del_all_log()函数删除所有之前残留的日志草稿
2.在main.py文件中输入预期的开始时间和结束时间,执行curl动作的设备的ip，帐号，密码以及每种资源curl多少个（默认10个）
3.config_linux_to_curl文件中配置要执行curl动作的linux设备的ip帐号密码等信息
4.get_all_cache(current_time, limit=100, host='192.168.1.106', user='root', passwd='0rd1230ac'):函数可设置资源获取的地址（cds的ip），前limit条以及该cds的帐号密码存放到
5.curl_resource_verbose(timestamp, classes=0, category=0, limit=5, system='windows', ua='iphone', need_assert=True):此函数是执行curl操作的，可以自己定义class category 执行limit个资源，在windows 或者 liunx系统下执行
user-agent的选择，need_assert为是否需要校验重定向日志和服务日志，默认是需要
6.可选择是否执行获取所有执行过的资源榜单get_all_hot_list(timestamp)以及错误日志（重定向日志和服务日志）的统计wrong_statistics_log(timestamp)
7.curl_resource_verbose 中可以对curl设置两个超时时间（或直接全局搜索连接超时时间用 --connect-timeout 参数来指定，数据传输的最大允许时间用 -m 参数来指定。这句话）
8.一个kind中，上下部分的时间间隔请修改curl_kind.py文件中的kind的time_line 或者在timer_customize中调用kind函数后面加上参数
9.如果要修改筛选资源的大小，请在get.cache。.py文件中修改

局限性：如果是从163获取资源的话，那么第一次执行该程序时无法使用自动诊断重定向日志和服务日志，因为163获取的资源 在106的数据库上不一定找得到资源